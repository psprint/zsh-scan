#!/usr/bin/env zsh
# Copyright (c) 2023 Sebastian Gniazdowski
#
# xzmap – extras function – map function/command to array
#

zsfilt() {

# Run as script?
integer bescript=${${0:#zsfilt}:+1}

# Set options
builtin emulate -L zsh -o extendedglob -o noshortloops \
                        -o warncreateglobal -o typesetsilent \
                        -o nopromptsubst -o rcquotes

# Set $0 with a new trick - use of %x prompt expansion
0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}

typeset -gA Plugins
# Source init script
source "$0:h:h"/libexec/zs::global-init.zsh

# Cleanup on exit
trap "unset -f zs-filter zs-save ZSIO" EXIT
trap "unset -f zs-filter zs-save ZSIO;return 1" INT

# Input/options
local -A Opts
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} -D -E -A Opts -- -fr z o v:||return 1

set -- "${@:#--}"
# Force output mode when script
((bescript))&&Opts[-o]=

# Get runnable or pattern to match
local PAT_OR_RUN=$1 MARR_VAR=$Opts[-v]
shift

# Is there any pattern or runnable to apply?
if [[ -z $PAT_OR_RUN ]];then
    zsmsg -e -h {err}Warning:{txt} No condition object, passing through
    return 1
fi

# Does runnable exist?
if (($+Opts[--fr]))&&! type $PAT_OR_RUN ZSIO; then
    zsmsg -h {err}Error:{txt} Couldn\'t find runnable: {cmd}$PAT_OR_RUN
    return 3
fi

# Is there any input?
if (($# <= 0));then
    zsmsg -h {err}Error:{txt} Missing arguments: the objects \
        to apply ·{cmd}$PAT_OR_RUN{txt}· on
    return 1
fi

# Initialize vars
local QE QECODES O
local -a qc=("$@") qcontent
integer QRET QOPT_GFLAG QFLAG_SEEN QHAVE_OUTPUT \
    QOPTIONAL=${${(M)PAT_OR_RUN##\!}:+1} QIDX
local PAT_OR_RUN=${PAT_OR_RUN#\!}

# Get the transported text from global alias
local QALIAS=${ZS[$PAT_OR_RUN]#-[a-z]:} \
        QPAT='(#B)([<](#b)([^>]#)[>]|)' # pattern for <*>
local QUNWIND QCONDITION QCMD

# The command to take on match
[[ $QALIAS == $~QPAT* ]]&&QCMD=$match[1]
# A more basic action – test if given #no parenthesis is/isn't empty
[[ $QALIAS == $~QPAT$~QPAT* ]]&&QCONDITION=$match[2]
# Unwinded pattern took from global alias transport
[[ $QALIAS == (($~QPAT)##:|)(#b)(*) ]]&&QUNWIND=$match[2]

util/zs::join-lines -d $'\f' -- "$@"
qcontent=("${reply[@]//[[:space:]]##(#e)/}")
REPLY= reply=()

#printf %s\\n QUNWIND=$QUNWIND QCMD=$QCMD QCONDITION=$QCONDITION
zs-code() {
    local QCMD=$1
    reply=()
    eval $QUNWIND
    [[ $QCMD == \!* ]]&&QOPT_GFLAG+=!!$#reply
    [[ $QCMD == [^\!]* ]]&&QOPT_GFLAG+=!$#reply
    qreply+=($reply)
}

zs-save() {
    local QCMD=${1##save:(\!|)} \
        QEX=${(MS)1##\!} VAR_NAME=$2 VAL=$3
    # Strip trailing space
    VAL=${VAL//((#s)[[:space:]]##|[[:space:]]##(#e))}
    # Check if command is ·save·

    [[ $1 != save:(\!|)<-> || $QCMD != <-> ]]&&return 1
    # Check if have required input
    ((!$#QCMD||!$#VAR_NAME||!$#VAL||
            ($#QEX&&${(P)#VAR_NAME})))&&return 1
    # Construct (P) var
    VAR_NAME=${VAR_NAME}\[${(P)#VAR_NAME}+1\]
    # Assign via (P)
    : ${(AP@)VAR_NAME::="$VAL"}
    zsmsg $ndbg -h -- DBG: saved $VAL
}

zs-filter()
{
    local QT=$1 PAT_OR_RUN=$2 INPUT=$3 MARR_VAR=$4 TMP
    local -a match=() mbegin=() mend=()
    integer RET

    # Passthrough mark? Only for command and condition check
    if [[ (-n $QCMD || -n $QCONDITION) && $INPUT == *\#[[:space:]]#zsweep:pass ]];then
        return 0
    fi

    if [[ $QT == 1 ]];then
        "$PAT_OR_RUN" "$INPUT" ZSIO
        RET=$?
    else
        # Prepare match vars
        match=() mbegin=() mend=()
        #print eval "INPUT=\${(S)INPUT//(#s)($QUNWIND)(#e)/°match°}"
        if [[ $QCMD == (\!|)code ]];then
            zs-code $QCMD
        else
            eval "INPUT=\${(S)INPUT//(#s)($QUNWIND)(#e)/°match°}"
            if [[ $INPUT == °match° && -n $QCONDITION ]];then
                if [[ $QCONDITION == \!* ]];then
                    [[ -z $match[${QCONDITION#\!}] ]]
                    RET=$?
                else
                    [[ -n $match[$QCONDITION] ]]
                    RET=$?
                fi
                # Optional matching makes sense only for …:QCON:… condition,
                # so set the QOPT_FLAG only in this if-branch.
                # QOPT_GFLAG equal to 1 means: the pattern matched, but
                # QCONDITION didn't hold, so return false even if there has
                # been °match° in the string. It's basically a second-stage
                # check – the QCONDITION must hold here
                QOPT_GFLAG+=RET
                # Save the matched line regardless of the QCONDITION result
                RET=0
            elif [[ $INPUT == °match° ]];then
                RET=0
            else
                RET=1
            fi
        fi
        # Any command passed in <…>?
        if ((!RET&&$#QCMD));then
            #print local VAR_NAME=${MARR_VAR}\[${(P)#MARR_VAR}+1\]
            integer QIDX=${QCMD##save:(\!|)}
            zs-save "$QCMD" "$MARR_VAR" "$match[QIDX]"
        fi
    fi
    return RET
}

if [[ -z ${PAT_OR_RUN#\!} ]]|| \
    {! checks/zs::verify-check "$PAT_OR_RUN"&&((!$+Opts[--fr]));}
then
    zswarn Check {data}$PAT_OR_RUN{txt} couldn\'t be found
    return 0
fi

for QE ($qcontent);do
        QIDX+=1
        if zs-filter $+Opts[--fr] "$PAT_OR_RUN" "$QE" "$MARR_VAR";then
            QECODES+=0 QRET=0
            (($+Opts[-o]))&&builtin print -r -- "$QE"||reply+=("$QE")
        else
            QRET=$?
            (($+Opts[-z]))&&QECODES+=$((QRET%10))
            # Meaning: output only when -z
            if (($+Opts[-o]&&$+Opts[-z]));then
                builtin print
            elif (($+Opts[-z]));then
                reply+=("")
            fi
        fi
        if ((QFLAG_SEEN!=QOPT_GFLAG));then
            QFLAG_SEEN=QOPT_GFLAG
            local QP=${QE//(#m)[\*\]\[\?\#\(\)\|\~]/\\$MATCH}
            integer QI=${qc[(I)${QP%%$'\f'*}*]}
            zserr -h %bnear line {num}\#$QI{txt}%b ↔\
              {code}${${QE%%$'\f'*}//$~qsp/ }{/code}{txt}%b:
        fi
done
REPLY=$QECODES

# At least 1 zero code exists?
[[ $REPLY != <1-9># ]]&&QHAVE_OUTPUT=1||QHAVE_OUTPUT=QOPTIONAL

# If run as script, then output status string via stdout
(((QHAVE_OUTPUT||$+Opts[-z])&&$+Opts[-o]))&&builtin print -r -- $REPLY

# Force false result if GFLAG is set
QRET=QOPT_GFLAG?1:1-QHAVE_OUTPUT
return QRET
}
