#!/usr/bin/env zsh
# -*- mode: sh;sh-indentation: 4;indent-tabs-mode: nil;sh-basic-offset: 4; -*-
#
# Copyright (c) 2023 Sebastian Gniazdowski
#

zsmsgi() {

#
# This function is special, because it doesn't source global-init
# script because there are calls to this function, leading to
# infinite recursion. It sets up it's autoload functions by itself.
#

# Recognize and save info on run as `#!/usr/bin/env zsh` script
[[ $0 != zsmsgi ]]&&integer bescript=1

# Set options
builtin emulate -L zsh -o extendedglob -o noshortloops \
                        -o warncreateglobal -o typesetsilent \
                        -o nopromptsubst

# Set $0 with a new trick - use of %x prompt expansion
0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}
: ${ZSDIR:=$0:h:h}

# -h - origin tag
# -p - overwrite quiet mode
# -q - quiet mode
# -e - print to stderr
# -n - no new line
local -A Opts
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} -D -E -A Opts -- h p q e n || return 7

# Quiet mode? → no printing if so
[[ ($+Opts[-q] == 1 || $2 == 1) && $+Opts[-p] != 1 ]]&&return
[[ $2 == <-> ]]&&{set -- $1 "$@[3,-1]";}
set -- ${@:#--}
local -Ua fpath=($ZSDIR/functions $fpath)
local -a reply
local TMP

autoload -z util/zs::setup-aliases util/zs::read-msg-theme #zsweep:pass

util/zs::setup-aliases||return 1
util/zs::read-msg-theme
local -A ZS=("$reply[@]")

# Blue message origin tag?
local funloc=$1 nick=$ZSNICK tmp
[[ $funloc == ?*:<-> ]]&&shift||funloc=
[[ -n $nick ]]&&tmp+="%U%B[%b$nick%B]{%}"
[[ -n $funloc ]]&&tmp+="%B[%b${funloc:t}%B]%b:{%}"

# Output origin tag?
(($+Opts[-h]))&&builtin set -- $tmp "$@"
# Output to stderr?
(($+Opts[-e]))&&local err=-u2
# No new line?
(($+Opts[-n]))&&local n=-n

zsmsg_cmd_helper() {
    [[ $(builtin type -w zs-format-$1) != *:\ none ]]&&print found
}

# Main work function
zsmsg_subst() {
    local pstart=$1 pend=$2 esc=$'\e[' cpstart='{' cpend='}'
    local op='«' cop='{' qc=%${${${(M)pstart#$cpstart}:+F}:-K} tmp tmpb tmpa
    shift 2
    # Format functions
    #${$(print -ru2 match 1:$match[1] 2:$match[2] 3:$match[2] 4:$match[3])+}\
    REPLY="${(j: :)@//(#b)([\\]#)${pstart}([^$pend]##)$pend\
([^$pstart]#~*[\\]##)/\
${${tmp::=$pstart$match[2]$pend}+}\
${${tmpb::=1}+}\
${${tmpa::=${match[1]//(#m)(#s)([\\][\\])#(#e)/\
${$(zsmsg_cmd_helper $match[2]):+\
$(zs-format-"$match[2]" "$match[3]")\
${match[3]::=}${tmpb::=}${${match[1]::=${match[1]%[\\]}}+}}}}+}\
$match[1]${tmpa/(#m)(#s)[\\]##(#e)/$tmp${tmpb::=}}\
${tmpb:+$tmp}$match[3]}"
    # ZS fields
    local e=kufbKUFB
    REPLY="${REPLY//(#b)([\\]#)${pstart}([^$pend]##)$pend\
([^$pstart]#~*[\\]##)/\
${match[1]%[\\]}\
${${tmpb::=$pstart$match[2]$pend}+}\
${${tmp::=${${${${(M)ZS[$match[2]]:#\
(#m)($esc|(%[$e])##|)(<->##(m|)|$'\n'|…|)}:+\
${MATCH%%[0-9]##}\
${${(M)MATCH%<->}:+$qc${cpstart}${MATCH##[^0-9]##}${cpend}}}}}}+}\
${${match[1]//(#s)([\\][\\])#(#e)/$tmp}//(#s)(#m)[\\]##(#e)/$tmpb}$match[3]}"
    return 0
}

# Isolate any quoted parts (with {code}…{/code})
REPLY=${@[*]//(#b)(\{code\}*\{\/code\})/%%CODE%%}
TMP=$'\x1b[3m'${match[1]//((#s)\{code\}|\{\/code\}(#e))}\
$ZS[%]
# Substitute foreground {color}
zsmsg_subst '{' '}' "$REPLY"
# Substitute background «color»
zsmsg_subst '«' '»' "$REPLY"

# Substitute $HOME
REPLY=${REPLY//$HOME/~}
# Restore quoted code
REPLY=${REPLY//\%\%CODE\%\%/$TMP}

# Output
#printf %s\\n
local q='\{' qn='{'
builtin print -r $n $err -P -- "${REPLY//$q/$qn}" "%k%f%b%u"

# Mark that zsmsg has run, to use in [[…]]&&zsmsg … cascades
REPLY=1

# vim:ft=zsh:sw=4:sts=4:et

}
