#!/usr/bin/env zsh
# -*- mode: sh;sh-indentation: 4;indent-tabs-mode: nil;sh-basic-offset: 4; -*-
#
# Copyright (c) 2023 Sebastian Gniazdowski
#

util/zs::read-file() {

# Set options
builtin emulate -L zsh -o extendedglob -o noshortloops \
                        -o warncreateglobal -o typesetsilent \
                        -o nopromptsubst

# Set $0 with a new trick - use of %x prompt expansion
0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}

# Input/options
local -A Opts
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} -D -E -A Opts -- v || return 1

local IN=$1 WAY=${2:-normal}
local -a content
REPLY= reply=()

# Verify input arguments
if [[ $IN == WRONGSTR ]]; then
    zsmsg -h {err}Error:{txt} no input file given
    return 1
elif [[ $WAY == WRONGSTR ]]; then
    zsmsg -h {err}Error:{txt} no input method given
    return 1
fi

# Load file with normal method
if [[ $WAY == normal* ]];then
    local IFS= LINE NL=$'\n'\\
    integer IDX=1 INC
    while read -r LINE; do
        ((INC))&&IDX+=1
        [[ $WAY != *-nojoin ]]&&\
            [[ $LINE == *([\\]|\|\||\&\&) ]]&&\
                INC=0||INC=1
        [[ $WAY != *-nojoin ]]&&LINE=${LINE%%[$~NL]##}
        content[IDX]+=$LINE
    done<$IN
# Or via history mechanism
elif [[ $WAY == history ]];then
    (){fc -a -p $IN; content=(${(Oa)history[@]});} ZSIO
elif [[ $WAY == subst ]];then
    content=("$(<$IN)")
else
    zswarn Unknown read-file method given ({opt}$WAY{txt}), couldn\'t read \
        file: {file}$IN:t
fi

integer RET=$?

(($+Opts[-v]))&&zsmsg -h {warn}Content has {num}$#content{warn} lines
((RET))&&zsmsg -h {err}Error:{txt} problems reading the file {file}$IN:t{txt} \
                    (exit code: {num}$RET{txt})

REPLY=${(pj:\\n:)content} reply=("$content[@]")
return RET

# vim:ft=zsh:sw=4:sts=4:et

}
